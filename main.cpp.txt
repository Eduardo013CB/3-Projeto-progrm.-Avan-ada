#include <cstdlib>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include "CutBox.hpp"
#include "CutEllipsoid.hpp"
#include "CutSphere.hpp"
#include "CutVoxel.hpp"
#include "FiguraGeometrica.hpp"
#include "PutBox.hpp"
#include "PutEllipsoid.hpp"
#include "PutSphere.hpp"
#include "PutVoxel.hpp"
#include "sculptor.hpp"


int main() {
  //  ponteiro do tipo sculptor
  Sculptor *k;

  //vetor de figuras
  std::vector<FiguraGeometrica *> figs;
  std::vector<FiguraGeometrica *>::iterator itf;

  //leitura do arquivo
  std::ifstream fin;

  fin.open("Figura.txt"); //abertura arquivo

  //criacao string p/ receber a leitura 
  std::string s;
  
  float r, g, b, a; //cor
  int nx, ny, nz; //dimensão

  //quando houver informações a serem lidas
  while (fin.good()) {

    // processa primeira linha
    fin >> s; 
    if (!fin.good())
      break;

    //verifica  (dados)

    if (s.compare("dim") == 0) {

      fin >> nx >> ny >> nz; // ler as dimensões
    }

    // desenha voxel
    if (s.compare("putvoxel") == 0) {
      int x, y, z;
      float r, g, b, a;
      fin >> x >> y >> z;
      fin >> r >> g >> b >> a;

      figs.push_back(new PutVoxel(x, y, z, r, g, b, a));
    }

    // corta voxel
    if (s.compare("cutvoxel") == 0) {
      int x, y, z;
      fin >> x >> y >> z;

      figs.push_back(new CutVoxel(x, y, z));
    }

    // desenha caixa
    if (s.compare("putbox") == 0) {
      int x0, x1, y0, y1, z0, z1;
      float r, g, b, a;
      fin >> x0 >> x1 >> y0 >> y1 >> z0 >> z1;
      fin >> r >> g >> b >> a;

      figs.push_back(new PutBox(x0, x1, y0, y1, z0, z1, r, g, b, a));
    }

      if (s.compare("cutbox") == 0) {
      int x0, x1, y0, y1, z0, z1;
      fin >> x0 >> x1 >> y0 >> y1 >> z0 >> z1;

      figs.push_back(new CutBox(x0, x1, y0, y1, z0, z1));
    }

    // desenha esfera
    if (s.compare("putsphere") == 0) {
      int xcenter, ycenter, zcenter, radius;
      float r, g, b, a;
      fin >> xcenter >> ycenter >> zcenter >> radius;
      fin >> r >> g >> b >> a;

      figs.push_back(
          new PutSphere(xcenter, ycenter, zcenter, radius, r, g, b, a));
    }

    // corta esfera
    if (s.compare("cutsphere") == 0) {
     int xcenter, ycenter, zcenter, radius;
      fin >> xcenter >> ycenter >> zcenter >> radius;

      figs.push_back(new CutSphere(xcenter, ycenter, zcenter, radius));
    }

    // corta elipse
    if (s.compare("putellipsoid") == 0) {
      int  xcenter,ycenter, zcenter, rx, ry, rz;
      float r, g, b, a;
      fin >> xcenter >> ycenter >> zcenter >> rx >> ry >> rz;
      fin >> r >> g >> b >> a;

      figs.push_back(
          new PutEllipsoid(xcenter, ycenter, zcenter, rx, ry, rz, r, g, b, a));
    }

    // corta elipse
    if (s.compare("cutellipsoid") == 0) {
      int xc, yc, zc, raiox, raioy, raioz;
      
      fin >> xc >> yc >> zc >> raiox >> raioy >> raioz;

      figs.push_back(new CutEllipsoid(xc, yc, zc, raiox, raioy, raioz));
    }
  }

  //cria  sculptor 
  k = new Sculptor(nx, ny, nz);

  //armazenamento figuras 
  for (int i = 0; i < figs.size(); i++) {
    figs[i]->draw(*k);
  }
  
  //registra formas geometricas no arquivo OFF
  k->writeOFF("teste.off");

  //liberação memoria alocada
  for (int i = 0; i < figs.size(); i++) {
    delete figs[i];
  }

  return 0;
} 